문제는 이해가 가는데 예제에 대한 출력값이 이해가 안간다.
DFS로 탐색을 진행했을때, 한번에 마지막까지 탐색을 해야한다는거 아닌가?? 예제가 이해가 안간다.....


문제 이해하고 다시 풀어봄
근데 안풀려서 다음에 다시 하는 걸로... ㅎㅎ

import sys

N, M = map(int, sys.stdin.readline().split())
visited = [False] * N
count = 0

arr = [[] for _ in range(N)]
for _ in range(M):
    i,j = map(int, sys.stdin.readline().split())
    arr[i].append(j)
    arr[j].append(i)
for i in range(N):
    arr[i].sort()


def DFS(x):
    global count
    visited[x] = True
    count += 1
    for i in arr[x]:
        if (visited[i] == False):
            DFS(i)
            break
    return visited

for i in range(N):
    count = 0
    visited = [False] * N 
    visited = DFS(i)
    if (count > 4):
        print(1)
        break



#################################################################
4/28
다시 도전!
한 가지 의문이 생겼다.
예를 들어 DFS 함수를 호출할 때, A,B,C 라는 task를 순차적으로 진행해야한다고 가정하자. A를 수행하는 과정에서 재귀함수 호출로 인해서 B,C를 스택에 넣어놓고 과정들을
진행한 뒤 마지막에 B와 C를 진행하게 된다. A를 수행하면서 바뀐 데이터들이 존재할텐데 B를 진행할 때 그 바뀐 값들이 적용되는 건지, 아니면 B를 스택에 넣을 당시의 데이터들을 가지고
B를 수행하는건지 잘 모르겠다.
느낌 상은 전자가 맞는 것 같다.

결국은 풀었다. 

import sys
sys.setrecursionlimit(100000)

def DFS(x,c):
    global result
    visited[x] = True
    c += 1
    if (c == 5):
        result = 1
    for i in arr[x]:
        if (visited[i] == False):
            DFS(i,c)
            visited[i] = False
            if result: 
                return


N, M = map(int, sys.stdin.readline().split())
visited = [False] * N
count = 0
result = 0

arr = [[] for _ in range(N)]
for _ in range(M):
    i,j = map(int, sys.stdin.readline().split())
    arr[i].append(j)
    arr[j].append(i)
    

for i in range(N):
    count = 0 
    DFS(i,count)
    visited[i] = False
    if result:
        break

print(result)


전체적인 아이디어는 맞았었다. 
하지만 DFS 함수 내의 
for i in arr[x]:
        if (visited[i] == False):
            DFS(i,c)
            visited[i] = False
            if result: 
                return
이 부분에서 visited[i] = False의 유무의 차이 때문에 해결이 되지 않았었다.
주어진 조건을 찾지 못했을 때 다시 관계를 찾기 위해 리셋을 시켜줘야하는데 앞서 풀었던 방법에서는 그 점을 고려하지 못했다.

